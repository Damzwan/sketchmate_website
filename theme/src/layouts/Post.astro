---
import {
  Container,
  TextCardSection,
} from '@littlesticks/odyssey-theme-components';
import Layout from './Page.astro';
import { generateTagData } from '../utils/helpers';
import { ClipboardCopy } from '@astro-github-elements/clipboard-copy';

const {content: {title, description, pubDate, canonicalURL, featuredImage, tags, attribution} } = Astro.props;

let allTagsData = [];

if(tags && tags.length > 0){
  allTagsData = generateTagData(tags);
}

const seo = {
	title,
	description,
    publishDate: pubDate,
	canonicalURL,
	image: featuredImage,
};
---
<Layout seo={seo}>
  <div class="post-header__container">
    <ul class="post-tags__list">
      {allTagsData.map(tag => (
        <li class="post-tags__tag">
          <a href={`/blog/tags/${tag.slug}`}>
            {tag.title}
          </a>
        </li>
      ))}
    </ul>
    <h2>{title}</h2>
    <p class="post-layout__date">
      <time><em>{pubDate}</em></time>
    </p>
    <a href={attribution}>Original image</a>
    {featuredImage && <img class="post-layout__img" src={featuredImage} alt={title} />}
  </div>
  <Container narrow>
    <article id="article">
        <slot></slot>
    </article>

    <div class="ml-embedded" style="padding-bottom: 2rem" data-form="V6Bop1"></div>
  </Container>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Locate the code blocks you want to target
    const codeBlocks = document.querySelectorAll('pre code');

    codeBlocks.forEach((block) => {
      const parent = block.parentNode;
      parent.style.position = 'relative'
      const button = document.createElement('button');
      button.style.right = '-10px'
      button.style.top = '-10px'
      button.style.opacity = '70%'
      button.style.cursor = 'pointer'
      button.style.position = 'absolute'
      button.innerHTML = 'Copy';

      button.addEventListener('click', () => {
        navigator.clipboard.writeText(block.textContent)
            .then(() => {
              // Change the button text to "Copied!"
              button.innerHTML = 'Copied!';

              // Reset the button text after 1.5 seconds
              setTimeout(() => {
                button.innerHTML = 'Copy';
              }, 1000);
            })
            .catch(() => {
              button.innerHTML = 'Failed';

              // Reset the button text after 1.5 seconds
              setTimeout(() => {
                button.innerHTML = 'Copy';
              }, 1000);
            });
      });

      // Append the button to each code block
      parent.appendChild(button);
    });
  });


</script>

<style>
  #article {
    padding-bottom: 3rem;
    font-size: 1.15rem;
  }
  .post-header__container {
    max-width: var(--theme-blog-post-header-width);
    margin: 1rem auto;
    padding: var(--container-padding);
  }
  .post-tags__list {
    margin: 1rem auto;
    padding: 0;
    list-style: none;
    display: flex;
    flex-wrap: wrap; /* This is to ensure the tags wrap to the next line if there's not enough space */
    gap: 10px; /* Spacing between tags */
  }
  .post-tags__tag {
    text-transform: uppercase;
  }
  .post-tags__tag a {
    font-size: var(--font-size-sm);
    text-decoration: none;
  }
  .post-layout__img {
    margin: 0 auto 1rem auto;
    border-radius: var(--theme-shape-radius);
    max-height: 300px;
  }
  .post-layout__date {
    margin-bottom: 1rem;
    opacity: 0.84;
  }
</style>